---
- name: Detect tailscal IP
  command: sudo tailscale ip --4
  register: tailscale_ip_cmd
  when: tailscale_ip is not defined
- name: Setting tailscale IP
  set_fact:
    tailscale_ip: "{{ tailscale_ip_cmd.stdout }}"
  when: tailscale_ip is not defined

- name: dokku apps:create {{service_name}}
  ansible.builtin.shell: dokku apps:create {{service_name}}
  register: result
  changed_when:
    - result.rc != 0
    - '"Name is already taken" not in result.stderr'
  failed_when:
    - result.rc != 0
    - '"Name is already taken" not in result.stderr'

- name: dokku storage:mount {{service_name}} {{item}}
  ansible.builtin.shell: "dokku storage:mount {{service_name}} {{item}}"
  loop: "{{ storage_items | default([], true) }}"
  when: storage_items
  register: storage_mount_cmd
  changed_when:
    - storage_mount_cmd.rc != 0
    - '"Mount path already exists." not in storage_mount_cmd.stderr'
  failed_when:
    - storage_mount_cmd.rc != 0
    - '"Mount path already exists." not in storage_mount_cmd.stderr'

- name: dokku git:from-image {{service_name}} {{container_name}}
  ansible.builtin.shell: "dokku git:from-image {{service_name}} {{container_name}}"
  register: from_image_cmd
  changed_when:
    - from_image_cmd.rc != 0
    - '"No changes detected, skipping git commit" not in from_image_cmd.stderr'
  failed_when:
    - from_image_cmd.rc != 0
    - '"No changes detected, skipping git commit" not in from_image_cmd.stderr'

# Add in a port mapping
- name: dokku ports:report {{service_name}} | grep '{{ port_map }}'
  ansible.builtin.shell: dokku ports:report {{service_name}} | grep '{{ port_map }}'
  register: detect_port_map
  when: port_map
  changed_when:
    - detect_port_map.rc == 1
  failed_when:
    - detect_port_map.rc not in [0, 1]

- name: dokku ports:add {{service_name}} {{port_map}}
  ansible.builtin.shell: dokku ports:add {{service_name}} {{port_map}}
  when: detect_port_map.changed
  register: port_map_cmd
  changed_when:
    - detect_port_map.changed

- name: dokku domains:add {{service_name}} "{{service_name}}.{{domain_name}}"
  ansible.builtin.shell: dokku domains:add {{service_name}} "{{item}}"
  register: domain_add_cmd
  changed_when:
    - domain_add_cmd.rc != 0
    - '"already added to" not in domain_add_cmd.stderr'
  failed_when:
    - domain_add_cmd.rc != 0
    - '"already added to" not in domain_add_cmd.stderr'
  loop:
    - "{{service_name}}.{{domain_name}}"

- name: Setting Docker Options
  ansible.builtin.shell: |
    dokku docker-options:report {{service_name}} | grep -- "{{item}}"
    if [ "$?" ==  "1" ]; then
      dokku docker-options:add {{service_name}} run "{{item}}"
      exit 2
    else
      exit 3
    fi
  loop: "{{ docker_options | default([], true) }}"
  register: set_docker_options_cmd
  changed_when:
    - set_docker_options_cmd.rc != 3
  failed_when:
    - set_docker_options_cmd.rc not in [2, 3]
  when: docker_options

- name: disable checks
  vars:
    disable_the_checks: "{{ disable_checks | default(false, true)}}"
  ansible.builtin.shell: |
    dokku checks:report {{service_name}} | grep 'disabled list.*_all_'
    if [ $? -eq 0 ]; then
      exit 2
    fi

    dokku checks:disable {{service_name}}
    exit 3
  when: disable_the_checks
  register: disable_checks_cmd
  changed_when:
    - disable_checks_cmd.rc == 3
  failed_when:
    - disable_checks_cmd.rc not in [0, 2, 3]

- name: Setting Docker Env Vars
  ansible.builtin.shell: |
    val=`dokku config:get {{service_name}} {{item.env_var_name}}`
    toSet='{{ item.env_var_value }}'
    if [[ $val == $toSet ]]; then
        echo "value already set"
        exit 1
    fi

    dokku config:set --no-restart {{service_name}} {{item.env_var_name}}='{{ item.env_var_value }}'
    exit 2
  loop: "{{ docker_config | default([], true) }}"
  register: set_docker_config_cmd
  changed_when:
    - set_docker_config_cmd.rc == 0
  failed_when:
    - set_docker_config_cmd.rc not in [0, 1, 2]
  when: docker_config

- name: Add A record for subservice
  become: false
  delegate_to: localhost
  amazon.aws.route53:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_access_key: "{{ aws_secret_access_key }}"
    command: create
    zone: "rumproarious.com"
    record: "{{service_name}}.{{domain_name}}"
    overwrite: true
    type: A
    ttl: 600
    value: "{{ tailscale_ip }}"

- name: Wait for DNS propagation {{service_name}}.{{ domain_name }}
  debug:
    msg: waiting on {{ domain_name }} to be {{tailscale_ip}}
  until: lookup('community.general.dig', service_name + '.' + domain_name, '@8.8.8.8') == tailscale_ip
  retries: 30
  delay: 10

- name: dokku ps:restart {{service_name}}
  ansible.builtin.shell: dokku ps:restart {{service_name}}
  # when: storage_mount_cmd.changed or from_image_cmd.changed or port_map_cmd.changed or domain_add_cmd.changed or set_docker_options_cmd.changed or set_docker_config_cmd.changed